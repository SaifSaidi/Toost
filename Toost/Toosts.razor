@using Toost.Internal
@inject ToostService ToostService
@implements IDisposable

<div class="toost-container @PositionClass" data-position="@Position.ToString().ToLower()">
    @foreach (var (toast, index) in Toasts.Select((toast, index) => (toast, index)))
    {
        <Toost @key="toast.Id"
               ToastInstance="toast"
               OnClose="() => RemoveToast(toast.Id)"
               Style=@($"--index: {index}; --offset: {index * 4 }px; --scale: {1 - (index * 0.04)}; z-index: {Toasts.Count - index};") />
    }
</div>

@code {
    [Parameter] public Position Position { get; set; } = Position.BottomRight;
    private const int MAX_TOASTS = 3;

    private string PositionClass => Position switch
    {
        Position.TopRight => "toost-container-top-right",
        Position.TopLeft => "toost-container-top-left",
        Position.BottomRight => "toost-container-bottom-right",
        Position.BottomLeft => "toost-container-bottom-left",
        Position.TopCenter => "toost-container-top-center",
        Position.BottomCenter => "toost-container-bottom-center",
        _ => "toost-container-top-right"
    };

    private List<IToostInstance> Toasts { get; set; } = new();

    protected override void OnInitialized()
    {
        ToostService.OnShow += ShowToast;
    }

    private void ShowToast(object? sender, ToostInstance toast)
    {
        InvokeAsync(() =>
        {
            Toasts.Insert(0, toast);
            if (Toasts.Count > MAX_TOASTS)
            {
                Toasts.RemoveAt(Toasts.Count - 1);
            }
            StateHasChanged();
        });
    }

    private void RemoveToast(Guid toastId)
    {
        InvokeAsync(() =>
        {
            var toastInstance = Toasts.SingleOrDefault(x => x.Id == toastId);
            if (toastInstance != null)
            {
                Toasts.Remove(toastInstance);
                StateHasChanged();
            }
        });
    }

    public void Dispose()
    {
        ToostService.OnShow -= ShowToast;
    }
}