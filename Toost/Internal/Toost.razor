@implements IDisposable
<div class="toost" role="alert" aria-live="assertive" aria-atomic="true" style="@Style">

    @if (ShowTime)
    {
        <!-- Timer Progress -->
        <div class="toost-timer">
            <svg width="20" height="20" viewBox="0 0 20 20">
                <circle r="8" cx="10" cy="10" fill="transparent" stroke="hsl(0 0% 91%)" stroke-width="2"></circle>
                <circle r="8" cx="10" cy="10" fill="transparent" stroke="@GetProgressColor()" stroke-width="2" stroke-dasharray="50.2654824574" stroke-dashoffset="0" class="progress-circle"
                        style="animation-duration: @($"{ToastInstance.Duration}ms");"></circle>
            </svg>
        </div>
    }

    <!-- Content -->
    <div class="toost-content">
        <p class="toost-title">@ToastInstance.Title</p>
        @if (!string.IsNullOrWhiteSpace(ToastInstance.Message))
        {
            <p class="toost-message">@ToastInstance.Message</p>
        }
    </div>

    <!-- Close button -->
    <button type="button" class="toost-close" @onclick="() => OnClose.InvokeAsync()" aria-label="Close notification">
        Close
    </button>
</div>



@code {
    [Parameter, EditorRequired] public IToostInstance ToastInstance { get; set; }
    [Parameter, EditorRequired] public EventCallback OnClose { get; set; }
    [Parameter] public required string Style { get; set; }

    [Parameter] public bool ShowTime { get; set; }

    private CancellationTokenSource? _cts;

    protected override void OnInitialized()
    {
        _cts = new CancellationTokenSource();
        _ = AutoCloseAsync(_cts.Token);
    }

    private async Task AutoCloseAsync(CancellationToken token)
    {
        try
        {
            await Task.Delay(ToastInstance.Duration, token);
            if (!token.IsCancellationRequested)
                await OnClose.InvokeAsync();
        }
        catch (TaskCanceledException) { }
    }

    public void Dispose()
    {
        _cts?.Cancel();
        _cts?.Dispose();
    }

    private string GetProgressColor() => ToastInstance.Type switch
    {
        AlertType.Success => "#22c55e", // green
        AlertType.Error => "#ef4444",   // red
        AlertType.Warning => "#eab308", // yellow
        _ => "#3b82f6",                 // blue
    };

    
}